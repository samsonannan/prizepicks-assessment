// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/cage"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/dinosaur"
)

// Dinosaur is the model entity for the Dinosaur schema.
type Dinosaur struct {
	config `json:"-"`
	// ID of the ent.
	// unique uuid for each dinosaur entity
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// name of dinosaur. must not be empty
	Name string `json:"name,omitempty"`
	// species dinosaur belongs. must not be empty
	Species string `json:"species,omitempty"`
	// group defines eating class based on species i.e HERBIVORE, CARNIVORE
	Group dinosaur.Group `json:"group,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the DinosaurQuery when eager-loading is set.
	Edges        DinosaurEdges `json:"edges"`
	cage_id      *uuid.UUID
	selectValues sql.SelectValues
}

// DinosaurEdges holds the relations/edges for other nodes in the graph.
type DinosaurEdges struct {
	// Cage holds the value of the cage edge.
	Cage *Cage `json:"cage,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// CageOrErr returns the Cage value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e DinosaurEdges) CageOrErr() (*Cage, error) {
	if e.loadedTypes[0] {
		if e.Cage == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: cage.Label}
		}
		return e.Cage, nil
	}
	return nil, &NotLoadedError{edge: "cage"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Dinosaur) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case dinosaur.FieldName, dinosaur.FieldSpecies, dinosaur.FieldGroup:
			values[i] = new(sql.NullString)
		case dinosaur.FieldCreatedAt, dinosaur.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case dinosaur.FieldID:
			values[i] = new(uuid.UUID)
		case dinosaur.ForeignKeys[0]: // cage_id
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Dinosaur fields.
func (d *Dinosaur) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case dinosaur.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				d.ID = *value
			}
		case dinosaur.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				d.CreatedAt = value.Time
			}
		case dinosaur.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				d.UpdatedAt = value.Time
			}
		case dinosaur.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				d.Name = value.String
			}
		case dinosaur.FieldSpecies:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field species", values[i])
			} else if value.Valid {
				d.Species = value.String
			}
		case dinosaur.FieldGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field group", values[i])
			} else if value.Valid {
				d.Group = dinosaur.Group(value.String)
			}
		case dinosaur.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field cage_id", values[i])
			} else if value.Valid {
				d.cage_id = new(uuid.UUID)
				*d.cage_id = *value.S.(*uuid.UUID)
			}
		default:
			d.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Dinosaur.
// This includes values selected through modifiers, order, etc.
func (d *Dinosaur) Value(name string) (ent.Value, error) {
	return d.selectValues.Get(name)
}

// QueryCage queries the "cage" edge of the Dinosaur entity.
func (d *Dinosaur) QueryCage() *CageQuery {
	return NewDinosaurClient(d.config).QueryCage(d)
}

// Update returns a builder for updating this Dinosaur.
// Note that you need to call Dinosaur.Unwrap() before calling this method if this Dinosaur
// was returned from a transaction, and the transaction was committed or rolled back.
func (d *Dinosaur) Update() *DinosaurUpdateOne {
	return NewDinosaurClient(d.config).UpdateOne(d)
}

// Unwrap unwraps the Dinosaur entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (d *Dinosaur) Unwrap() *Dinosaur {
	_tx, ok := d.config.driver.(*txDriver)
	if !ok {
		panic("ent: Dinosaur is not a transactional entity")
	}
	d.config.driver = _tx.drv
	return d
}

// String implements the fmt.Stringer.
func (d *Dinosaur) String() string {
	var builder strings.Builder
	builder.WriteString("Dinosaur(")
	builder.WriteString(fmt.Sprintf("id=%v, ", d.ID))
	builder.WriteString("created_at=")
	builder.WriteString(d.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(d.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(d.Name)
	builder.WriteString(", ")
	builder.WriteString("species=")
	builder.WriteString(d.Species)
	builder.WriteString(", ")
	builder.WriteString("group=")
	builder.WriteString(fmt.Sprintf("%v", d.Group))
	builder.WriteByte(')')
	return builder.String()
}

// Dinosaurs is a parsable slice of Dinosaur.
type Dinosaurs []*Dinosaur
