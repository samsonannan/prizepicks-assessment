// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/cage"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/dinosaur"
)

// DinosaurCreate is the builder for creating a Dinosaur entity.
type DinosaurCreate struct {
	config
	mutation *DinosaurMutation
	hooks    []Hook
}

// SetCreatedAt sets the "created_at" field.
func (dc *DinosaurCreate) SetCreatedAt(t time.Time) *DinosaurCreate {
	dc.mutation.SetCreatedAt(t)
	return dc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (dc *DinosaurCreate) SetNillableCreatedAt(t *time.Time) *DinosaurCreate {
	if t != nil {
		dc.SetCreatedAt(*t)
	}
	return dc
}

// SetUpdatedAt sets the "updated_at" field.
func (dc *DinosaurCreate) SetUpdatedAt(t time.Time) *DinosaurCreate {
	dc.mutation.SetUpdatedAt(t)
	return dc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (dc *DinosaurCreate) SetNillableUpdatedAt(t *time.Time) *DinosaurCreate {
	if t != nil {
		dc.SetUpdatedAt(*t)
	}
	return dc
}

// SetName sets the "name" field.
func (dc *DinosaurCreate) SetName(s string) *DinosaurCreate {
	dc.mutation.SetName(s)
	return dc
}

// SetSpecies sets the "species" field.
func (dc *DinosaurCreate) SetSpecies(s string) *DinosaurCreate {
	dc.mutation.SetSpecies(s)
	return dc
}

// SetGroup sets the "group" field.
func (dc *DinosaurCreate) SetGroup(d dinosaur.Group) *DinosaurCreate {
	dc.mutation.SetGroup(d)
	return dc
}

// SetID sets the "id" field.
func (dc *DinosaurCreate) SetID(u uuid.UUID) *DinosaurCreate {
	dc.mutation.SetID(u)
	return dc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (dc *DinosaurCreate) SetNillableID(u *uuid.UUID) *DinosaurCreate {
	if u != nil {
		dc.SetID(*u)
	}
	return dc
}

// SetCageID sets the "cage" edge to the Cage entity by ID.
func (dc *DinosaurCreate) SetCageID(id uuid.UUID) *DinosaurCreate {
	dc.mutation.SetCageID(id)
	return dc
}

// SetNillableCageID sets the "cage" edge to the Cage entity by ID if the given value is not nil.
func (dc *DinosaurCreate) SetNillableCageID(id *uuid.UUID) *DinosaurCreate {
	if id != nil {
		dc = dc.SetCageID(*id)
	}
	return dc
}

// SetCage sets the "cage" edge to the Cage entity.
func (dc *DinosaurCreate) SetCage(c *Cage) *DinosaurCreate {
	return dc.SetCageID(c.ID)
}

// Mutation returns the DinosaurMutation object of the builder.
func (dc *DinosaurCreate) Mutation() *DinosaurMutation {
	return dc.mutation
}

// Save creates the Dinosaur in the database.
func (dc *DinosaurCreate) Save(ctx context.Context) (*Dinosaur, error) {
	dc.defaults()
	return withHooks(ctx, dc.sqlSave, dc.mutation, dc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (dc *DinosaurCreate) SaveX(ctx context.Context) *Dinosaur {
	v, err := dc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dc *DinosaurCreate) Exec(ctx context.Context) error {
	_, err := dc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dc *DinosaurCreate) ExecX(ctx context.Context) {
	if err := dc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (dc *DinosaurCreate) defaults() {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		v := dinosaur.DefaultCreatedAt()
		dc.mutation.SetCreatedAt(v)
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		v := dinosaur.DefaultUpdatedAt()
		dc.mutation.SetUpdatedAt(v)
	}
	if _, ok := dc.mutation.ID(); !ok {
		v := dinosaur.DefaultID()
		dc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (dc *DinosaurCreate) check() error {
	if _, ok := dc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Dinosaur.created_at"`)}
	}
	if _, ok := dc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Dinosaur.updated_at"`)}
	}
	if _, ok := dc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Dinosaur.name"`)}
	}
	if v, ok := dc.mutation.Name(); ok {
		if err := dinosaur.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Dinosaur.name": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Species(); !ok {
		return &ValidationError{Name: "species", err: errors.New(`ent: missing required field "Dinosaur.species"`)}
	}
	if v, ok := dc.mutation.Species(); ok {
		if err := dinosaur.SpeciesValidator(v); err != nil {
			return &ValidationError{Name: "species", err: fmt.Errorf(`ent: validator failed for field "Dinosaur.species": %w`, err)}
		}
	}
	if _, ok := dc.mutation.Group(); !ok {
		return &ValidationError{Name: "group", err: errors.New(`ent: missing required field "Dinosaur.group"`)}
	}
	if v, ok := dc.mutation.Group(); ok {
		if err := dinosaur.GroupValidator(v); err != nil {
			return &ValidationError{Name: "group", err: fmt.Errorf(`ent: validator failed for field "Dinosaur.group": %w`, err)}
		}
	}
	return nil
}

func (dc *DinosaurCreate) sqlSave(ctx context.Context) (*Dinosaur, error) {
	if err := dc.check(); err != nil {
		return nil, err
	}
	_node, _spec := dc.createSpec()
	if err := sqlgraph.CreateNode(ctx, dc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	dc.mutation.id = &_node.ID
	dc.mutation.done = true
	return _node, nil
}

func (dc *DinosaurCreate) createSpec() (*Dinosaur, *sqlgraph.CreateSpec) {
	var (
		_node = &Dinosaur{config: dc.config}
		_spec = sqlgraph.NewCreateSpec(dinosaur.Table, sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID))
	)
	if id, ok := dc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := dc.mutation.CreatedAt(); ok {
		_spec.SetField(dinosaur.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := dc.mutation.UpdatedAt(); ok {
		_spec.SetField(dinosaur.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := dc.mutation.Name(); ok {
		_spec.SetField(dinosaur.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := dc.mutation.Species(); ok {
		_spec.SetField(dinosaur.FieldSpecies, field.TypeString, value)
		_node.Species = value
	}
	if value, ok := dc.mutation.Group(); ok {
		_spec.SetField(dinosaur.FieldGroup, field.TypeEnum, value)
		_node.Group = value
	}
	if nodes := dc.mutation.CageIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   dinosaur.CageTable,
			Columns: []string{dinosaur.CageColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(cage.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.cage_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// DinosaurCreateBulk is the builder for creating many Dinosaur entities in bulk.
type DinosaurCreateBulk struct {
	config
	builders []*DinosaurCreate
}

// Save creates the Dinosaur entities in the database.
func (dcb *DinosaurCreateBulk) Save(ctx context.Context) ([]*Dinosaur, error) {
	specs := make([]*sqlgraph.CreateSpec, len(dcb.builders))
	nodes := make([]*Dinosaur, len(dcb.builders))
	mutators := make([]Mutator, len(dcb.builders))
	for i := range dcb.builders {
		func(i int, root context.Context) {
			builder := dcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*DinosaurMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, dcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, dcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, dcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (dcb *DinosaurCreateBulk) SaveX(ctx context.Context) []*Dinosaur {
	v, err := dcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (dcb *DinosaurCreateBulk) Exec(ctx context.Context) error {
	_, err := dcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (dcb *DinosaurCreateBulk) ExecX(ctx context.Context) {
	if err := dcb.Exec(ctx); err != nil {
		panic(err)
	}
}
