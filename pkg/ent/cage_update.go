// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/cage"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/dinosaur"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/predicate"
)

// CageUpdate is the builder for updating Cage entities.
type CageUpdate struct {
	config
	hooks    []Hook
	mutation *CageMutation
}

// Where appends a list predicates to the CageUpdate builder.
func (cu *CageUpdate) Where(ps ...predicate.Cage) *CageUpdate {
	cu.mutation.Where(ps...)
	return cu
}

// SetUpdatedAt sets the "updated_at" field.
func (cu *CageUpdate) SetUpdatedAt(t time.Time) *CageUpdate {
	cu.mutation.SetUpdatedAt(t)
	return cu
}

// SetSize sets the "size" field.
func (cu *CageUpdate) SetSize(i int64) *CageUpdate {
	cu.mutation.ResetSize()
	cu.mutation.SetSize(i)
	return cu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cu *CageUpdate) SetNillableSize(i *int64) *CageUpdate {
	if i != nil {
		cu.SetSize(*i)
	}
	return cu
}

// AddSize adds i to the "size" field.
func (cu *CageUpdate) AddSize(i int64) *CageUpdate {
	cu.mutation.AddSize(i)
	return cu
}

// SetCapacity sets the "capacity" field.
func (cu *CageUpdate) SetCapacity(i int64) *CageUpdate {
	cu.mutation.ResetCapacity()
	cu.mutation.SetCapacity(i)
	return cu
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (cu *CageUpdate) SetNillableCapacity(i *int64) *CageUpdate {
	if i != nil {
		cu.SetCapacity(*i)
	}
	return cu
}

// AddCapacity adds i to the "capacity" field.
func (cu *CageUpdate) AddCapacity(i int64) *CageUpdate {
	cu.mutation.AddCapacity(i)
	return cu
}

// SetStatus sets the "status" field.
func (cu *CageUpdate) SetStatus(c cage.Status) *CageUpdate {
	cu.mutation.SetStatus(c)
	return cu
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cu *CageUpdate) SetNillableStatus(c *cage.Status) *CageUpdate {
	if c != nil {
		cu.SetStatus(*c)
	}
	return cu
}

// AddDinosaurIDs adds the "dinosaurs" edge to the Dinosaur entity by IDs.
func (cu *CageUpdate) AddDinosaurIDs(ids ...uuid.UUID) *CageUpdate {
	cu.mutation.AddDinosaurIDs(ids...)
	return cu
}

// AddDinosaurs adds the "dinosaurs" edges to the Dinosaur entity.
func (cu *CageUpdate) AddDinosaurs(d ...*Dinosaur) *CageUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.AddDinosaurIDs(ids...)
}

// Mutation returns the CageMutation object of the builder.
func (cu *CageUpdate) Mutation() *CageMutation {
	return cu.mutation
}

// ClearDinosaurs clears all "dinosaurs" edges to the Dinosaur entity.
func (cu *CageUpdate) ClearDinosaurs() *CageUpdate {
	cu.mutation.ClearDinosaurs()
	return cu
}

// RemoveDinosaurIDs removes the "dinosaurs" edge to Dinosaur entities by IDs.
func (cu *CageUpdate) RemoveDinosaurIDs(ids ...uuid.UUID) *CageUpdate {
	cu.mutation.RemoveDinosaurIDs(ids...)
	return cu
}

// RemoveDinosaurs removes "dinosaurs" edges to Dinosaur entities.
func (cu *CageUpdate) RemoveDinosaurs(d ...*Dinosaur) *CageUpdate {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cu.RemoveDinosaurIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cu *CageUpdate) Save(ctx context.Context) (int, error) {
	cu.defaults()
	return withHooks(ctx, cu.sqlSave, cu.mutation, cu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cu *CageUpdate) SaveX(ctx context.Context) int {
	affected, err := cu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cu *CageUpdate) Exec(ctx context.Context) error {
	_, err := cu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cu *CageUpdate) ExecX(ctx context.Context) {
	if err := cu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cu *CageUpdate) defaults() {
	if _, ok := cu.mutation.UpdatedAt(); !ok {
		v := cage.UpdateDefaultUpdatedAt()
		cu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cu *CageUpdate) check() error {
	if v, ok := cu.mutation.Size(); ok {
		if err := cage.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Cage.size": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Capacity(); ok {
		if err := cage.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Cage.capacity": %w`, err)}
		}
	}
	if v, ok := cu.mutation.Status(); ok {
		if err := cage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Cage.status": %w`, err)}
		}
	}
	return nil
}

func (cu *CageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := cu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(cage.Table, cage.Columns, sqlgraph.NewFieldSpec(cage.FieldID, field.TypeUUID))
	if ps := cu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cu.mutation.UpdatedAt(); ok {
		_spec.SetField(cage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cu.mutation.Size(); ok {
		_spec.SetField(cage.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedSize(); ok {
		_spec.AddField(cage.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Capacity(); ok {
		_spec.SetField(cage.FieldCapacity, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.AddedCapacity(); ok {
		_spec.AddField(cage.FieldCapacity, field.TypeInt64, value)
	}
	if value, ok := cu.mutation.Status(); ok {
		_spec.SetField(cage.FieldStatus, field.TypeEnum, value)
	}
	if cu.mutation.DinosaursCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.RemovedDinosaursIDs(); len(nodes) > 0 && !cu.mutation.DinosaursCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cu.mutation.DinosaursIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	cu.mutation.done = true
	return n, nil
}

// CageUpdateOne is the builder for updating a single Cage entity.
type CageUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CageMutation
}

// SetUpdatedAt sets the "updated_at" field.
func (cuo *CageUpdateOne) SetUpdatedAt(t time.Time) *CageUpdateOne {
	cuo.mutation.SetUpdatedAt(t)
	return cuo
}

// SetSize sets the "size" field.
func (cuo *CageUpdateOne) SetSize(i int64) *CageUpdateOne {
	cuo.mutation.ResetSize()
	cuo.mutation.SetSize(i)
	return cuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (cuo *CageUpdateOne) SetNillableSize(i *int64) *CageUpdateOne {
	if i != nil {
		cuo.SetSize(*i)
	}
	return cuo
}

// AddSize adds i to the "size" field.
func (cuo *CageUpdateOne) AddSize(i int64) *CageUpdateOne {
	cuo.mutation.AddSize(i)
	return cuo
}

// SetCapacity sets the "capacity" field.
func (cuo *CageUpdateOne) SetCapacity(i int64) *CageUpdateOne {
	cuo.mutation.ResetCapacity()
	cuo.mutation.SetCapacity(i)
	return cuo
}

// SetNillableCapacity sets the "capacity" field if the given value is not nil.
func (cuo *CageUpdateOne) SetNillableCapacity(i *int64) *CageUpdateOne {
	if i != nil {
		cuo.SetCapacity(*i)
	}
	return cuo
}

// AddCapacity adds i to the "capacity" field.
func (cuo *CageUpdateOne) AddCapacity(i int64) *CageUpdateOne {
	cuo.mutation.AddCapacity(i)
	return cuo
}

// SetStatus sets the "status" field.
func (cuo *CageUpdateOne) SetStatus(c cage.Status) *CageUpdateOne {
	cuo.mutation.SetStatus(c)
	return cuo
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (cuo *CageUpdateOne) SetNillableStatus(c *cage.Status) *CageUpdateOne {
	if c != nil {
		cuo.SetStatus(*c)
	}
	return cuo
}

// AddDinosaurIDs adds the "dinosaurs" edge to the Dinosaur entity by IDs.
func (cuo *CageUpdateOne) AddDinosaurIDs(ids ...uuid.UUID) *CageUpdateOne {
	cuo.mutation.AddDinosaurIDs(ids...)
	return cuo
}

// AddDinosaurs adds the "dinosaurs" edges to the Dinosaur entity.
func (cuo *CageUpdateOne) AddDinosaurs(d ...*Dinosaur) *CageUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.AddDinosaurIDs(ids...)
}

// Mutation returns the CageMutation object of the builder.
func (cuo *CageUpdateOne) Mutation() *CageMutation {
	return cuo.mutation
}

// ClearDinosaurs clears all "dinosaurs" edges to the Dinosaur entity.
func (cuo *CageUpdateOne) ClearDinosaurs() *CageUpdateOne {
	cuo.mutation.ClearDinosaurs()
	return cuo
}

// RemoveDinosaurIDs removes the "dinosaurs" edge to Dinosaur entities by IDs.
func (cuo *CageUpdateOne) RemoveDinosaurIDs(ids ...uuid.UUID) *CageUpdateOne {
	cuo.mutation.RemoveDinosaurIDs(ids...)
	return cuo
}

// RemoveDinosaurs removes "dinosaurs" edges to Dinosaur entities.
func (cuo *CageUpdateOne) RemoveDinosaurs(d ...*Dinosaur) *CageUpdateOne {
	ids := make([]uuid.UUID, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return cuo.RemoveDinosaurIDs(ids...)
}

// Where appends a list predicates to the CageUpdate builder.
func (cuo *CageUpdateOne) Where(ps ...predicate.Cage) *CageUpdateOne {
	cuo.mutation.Where(ps...)
	return cuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cuo *CageUpdateOne) Select(field string, fields ...string) *CageUpdateOne {
	cuo.fields = append([]string{field}, fields...)
	return cuo
}

// Save executes the query and returns the updated Cage entity.
func (cuo *CageUpdateOne) Save(ctx context.Context) (*Cage, error) {
	cuo.defaults()
	return withHooks(ctx, cuo.sqlSave, cuo.mutation, cuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (cuo *CageUpdateOne) SaveX(ctx context.Context) *Cage {
	node, err := cuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cuo *CageUpdateOne) Exec(ctx context.Context) error {
	_, err := cuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cuo *CageUpdateOne) ExecX(ctx context.Context) {
	if err := cuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (cuo *CageUpdateOne) defaults() {
	if _, ok := cuo.mutation.UpdatedAt(); !ok {
		v := cage.UpdateDefaultUpdatedAt()
		cuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cuo *CageUpdateOne) check() error {
	if v, ok := cuo.mutation.Size(); ok {
		if err := cage.SizeValidator(v); err != nil {
			return &ValidationError{Name: "size", err: fmt.Errorf(`ent: validator failed for field "Cage.size": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Capacity(); ok {
		if err := cage.CapacityValidator(v); err != nil {
			return &ValidationError{Name: "capacity", err: fmt.Errorf(`ent: validator failed for field "Cage.capacity": %w`, err)}
		}
	}
	if v, ok := cuo.mutation.Status(); ok {
		if err := cage.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Cage.status": %w`, err)}
		}
	}
	return nil
}

func (cuo *CageUpdateOne) sqlSave(ctx context.Context) (_node *Cage, err error) {
	if err := cuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(cage.Table, cage.Columns, sqlgraph.NewFieldSpec(cage.FieldID, field.TypeUUID))
	id, ok := cuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Cage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, cage.FieldID)
		for _, f := range fields {
			if !cage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != cage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cuo.mutation.UpdatedAt(); ok {
		_spec.SetField(cage.FieldUpdatedAt, field.TypeTime, value)
	}
	if value, ok := cuo.mutation.Size(); ok {
		_spec.SetField(cage.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedSize(); ok {
		_spec.AddField(cage.FieldSize, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Capacity(); ok {
		_spec.SetField(cage.FieldCapacity, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.AddedCapacity(); ok {
		_spec.AddField(cage.FieldCapacity, field.TypeInt64, value)
	}
	if value, ok := cuo.mutation.Status(); ok {
		_spec.SetField(cage.FieldStatus, field.TypeEnum, value)
	}
	if cuo.mutation.DinosaursCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.RemovedDinosaursIDs(); len(nodes) > 0 && !cuo.mutation.DinosaursCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := cuo.mutation.DinosaursIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   cage.DinosaursTable,
			Columns: []string{cage.DinosaursColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(dinosaur.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Cage{config: cuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{cage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	cuo.mutation.done = true
	return _node, nil
}
