// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/samsonannan/prizepicks-assessment/pkg/ent/cage"
)

// Cage is the model entity for the Cage schema.
type Cage struct {
	config `json:"-"`
	// ID of the ent.
	// unique uuid for each cage entity
	ID uuid.UUID `json:"id,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// number of dinosaurs held in cage. defaults to zero
	Size int64 `json:"size,omitempty"`
	// capacity for each cage entity. defaults to zero
	Capacity int64 `json:"capacity,omitempty"`
	// status for cage entity. can be ACTIVE or DOWN only
	Status cage.Status `json:"status,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the CageQuery when eager-loading is set.
	Edges        CageEdges `json:"edges"`
	selectValues sql.SelectValues
}

// CageEdges holds the relations/edges for other nodes in the graph.
type CageEdges struct {
	// Dinosaurs holds the value of the dinosaurs edge.
	Dinosaurs []*Dinosaur `json:"dinosaurs,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// DinosaursOrErr returns the Dinosaurs value or an error if the edge
// was not loaded in eager-loading.
func (e CageEdges) DinosaursOrErr() ([]*Dinosaur, error) {
	if e.loadedTypes[0] {
		return e.Dinosaurs, nil
	}
	return nil, &NotLoadedError{edge: "dinosaurs"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Cage) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case cage.FieldSize, cage.FieldCapacity:
			values[i] = new(sql.NullInt64)
		case cage.FieldStatus:
			values[i] = new(sql.NullString)
		case cage.FieldCreatedAt, cage.FieldUpdatedAt:
			values[i] = new(sql.NullTime)
		case cage.FieldID:
			values[i] = new(uuid.UUID)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Cage fields.
func (c *Cage) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case cage.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				c.ID = *value
			}
		case cage.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				c.CreatedAt = value.Time
			}
		case cage.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				c.UpdatedAt = value.Time
			}
		case cage.FieldSize:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				c.Size = value.Int64
			}
		case cage.FieldCapacity:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field capacity", values[i])
			} else if value.Valid {
				c.Capacity = value.Int64
			}
		case cage.FieldStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field status", values[i])
			} else if value.Valid {
				c.Status = cage.Status(value.String)
			}
		default:
			c.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Cage.
// This includes values selected through modifiers, order, etc.
func (c *Cage) Value(name string) (ent.Value, error) {
	return c.selectValues.Get(name)
}

// QueryDinosaurs queries the "dinosaurs" edge of the Cage entity.
func (c *Cage) QueryDinosaurs() *DinosaurQuery {
	return NewCageClient(c.config).QueryDinosaurs(c)
}

// Update returns a builder for updating this Cage.
// Note that you need to call Cage.Unwrap() before calling this method if this Cage
// was returned from a transaction, and the transaction was committed or rolled back.
func (c *Cage) Update() *CageUpdateOne {
	return NewCageClient(c.config).UpdateOne(c)
}

// Unwrap unwraps the Cage entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (c *Cage) Unwrap() *Cage {
	_tx, ok := c.config.driver.(*txDriver)
	if !ok {
		panic("ent: Cage is not a transactional entity")
	}
	c.config.driver = _tx.drv
	return c
}

// String implements the fmt.Stringer.
func (c *Cage) String() string {
	var builder strings.Builder
	builder.WriteString("Cage(")
	builder.WriteString(fmt.Sprintf("id=%v, ", c.ID))
	builder.WriteString("created_at=")
	builder.WriteString(c.CreatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("updated_at=")
	builder.WriteString(c.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(fmt.Sprintf("%v", c.Size))
	builder.WriteString(", ")
	builder.WriteString("capacity=")
	builder.WriteString(fmt.Sprintf("%v", c.Capacity))
	builder.WriteString(", ")
	builder.WriteString("status=")
	builder.WriteString(fmt.Sprintf("%v", c.Status))
	builder.WriteByte(')')
	return builder.String()
}

// Cages is a parsable slice of Cage.
type Cages []*Cage
